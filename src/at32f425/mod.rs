#![doc = "Peripheral access API for AT32F425 microcontrollers (generated using svd2rust v0.37.1 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.37.1/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 4;
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, FPU, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[cfg(feature = "rt")]
extern "C" {
    fn WWDT();
    fn PVM();
    fn ERTC();
    fn FLASH();
    fn CRM();
    fn EXTINT1_0();
    fn EXTINT3_2();
    fn EXTINT15_4();
    fn ACC();
    fn DMA1_CHANNEL1();
    fn DMA1_CHANNEL3_2();
    fn DMA1_CHANNEL7_4();
    fn ADC1();
    fn TMR1_BRK_OVF_TRG_HALL();
    fn TMR1_CH();
    fn TMR2();
    fn TMR3();
    fn TMR6();
    fn TMR7();
    fn TMR14();
    fn TMR15();
    fn TMR16();
    fn TMR17();
    fn I2C1_EVT();
    fn I2C2_EVT();
    fn SPI1();
    fn SPI2();
    fn USART1();
    fn USART2();
    fn USART4_3();
    fn CAN1();
    fn OTGFS();
    fn I2C1_ERR();
    fn SPI3();
    fn I2C2_ERR();
    fn TMR13();
    fn OTGFS1();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 68] = [
    Vector { _handler: WWDT },
    Vector { _handler: PVM },
    Vector { _handler: ERTC },
    Vector { _handler: FLASH },
    Vector { _handler: CRM },
    Vector {
        _handler: EXTINT1_0,
    },
    Vector {
        _handler: EXTINT3_2,
    },
    Vector {
        _handler: EXTINT15_4,
    },
    Vector { _handler: ACC },
    Vector {
        _handler: DMA1_CHANNEL1,
    },
    Vector {
        _handler: DMA1_CHANNEL3_2,
    },
    Vector {
        _handler: DMA1_CHANNEL7_4,
    },
    Vector { _handler: ADC1 },
    Vector {
        _handler: TMR1_BRK_OVF_TRG_HALL,
    },
    Vector { _handler: TMR1_CH },
    Vector { _handler: TMR2 },
    Vector { _handler: TMR3 },
    Vector { _handler: TMR6 },
    Vector { _handler: TMR7 },
    Vector { _handler: TMR14 },
    Vector { _handler: TMR15 },
    Vector { _handler: TMR16 },
    Vector { _handler: TMR17 },
    Vector { _handler: I2C1_EVT },
    Vector { _handler: I2C2_EVT },
    Vector { _handler: SPI1 },
    Vector { _handler: SPI2 },
    Vector { _handler: USART1 },
    Vector { _handler: USART2 },
    Vector { _handler: USART4_3 },
    Vector { _handler: CAN1 },
    Vector { _handler: OTGFS },
    Vector { _handler: I2C1_ERR },
    Vector { _handler: SPI3 },
    Vector { _handler: I2C2_ERR },
    Vector { _handler: TMR13 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: OTGFS1 },
];
#[doc = r"Enumeration of all the interrupts."]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    #[doc = "0 - Window Watchdog interrupt"]
    WWDT = 0,
    #[doc = "1 - PVM interrupt connect to EXTI line16"]
    PVM = 1,
    #[doc = "2 - ERTC interrupt connect to EXTI line17_19_20"]
    ERTC = 2,
    #[doc = "3 - Flash global interrupt"]
    FLASH = 3,
    #[doc = "4 - CRM global interrupt"]
    CRM = 4,
    #[doc = "5 - EXINT Line1_0 interrupt"]
    EXTINT1_0 = 5,
    #[doc = "6 - EXINT Line3_2 interrupt"]
    EXTINT3_2 = 6,
    #[doc = "7 - EXINT Line15_4 interrupt"]
    EXTINT15_4 = 7,
    #[doc = "8 - ACC interrupts"]
    ACC = 8,
    #[doc = "9 - DMA1 Channel1 global interrupt"]
    DMA1_CHANNEL1 = 9,
    #[doc = "10 - DMA1 Channel3_2 global interrupt"]
    DMA1_CHANNEL3_2 = 10,
    #[doc = "11 - DMA1 Channel7_4 global interrupt"]
    DMA1_CHANNEL7_4 = 11,
    #[doc = "12 - ADC1 global interrupt"]
    ADC1 = 12,
    #[doc = "13 - TMR1 overflow brake trigger hall interrupt"]
    TMR1_BRK_OVF_TRG_HALL = 13,
    #[doc = "14 - TMR1 channel interrupt"]
    TMR1_CH = 14,
    #[doc = "15 - TMR2 global interrupt"]
    TMR2 = 15,
    #[doc = "16 - TMR3 global interrupt"]
    TMR3 = 16,
    #[doc = "17 - TMR6 global interrupt"]
    TMR6 = 17,
    #[doc = "18 - TMR7 global interrupt"]
    TMR7 = 18,
    #[doc = "19 - TMR14 global interrupt"]
    TMR14 = 19,
    #[doc = "20 - TMR15 global interrupt"]
    TMR15 = 20,
    #[doc = "21 - TMR16 global interrupt"]
    TMR16 = 21,
    #[doc = "22 - TMR17 global interrupt"]
    TMR17 = 22,
    #[doc = "23 - I2C1 event interrupt"]
    I2C1_EVT = 23,
    #[doc = "24 - I2C2 event interrupt"]
    I2C2_EVT = 24,
    #[doc = "25 - SPI1 global interrupt"]
    SPI1 = 25,
    #[doc = "26 - SPI2 global interrupt"]
    SPI2 = 26,
    #[doc = "27 - USART1 global interrupt"]
    USART1 = 27,
    #[doc = "28 - USART2 global interrupt"]
    USART2 = 28,
    #[doc = "29 - USART4_3 global interrupt"]
    USART4_3 = 29,
    #[doc = "30 - CAN1 global interrupt"]
    CAN1 = 30,
    #[doc = "31 - OTGFS interrupt connect to EXTI Line18"]
    OTGFS = 31,
    #[doc = "32 - I2C1 error interrupt"]
    I2C1_ERR = 32,
    #[doc = "33 - SPI3 global interrupt"]
    SPI3 = 33,
    #[doc = "34 - I2C2 error interrupt"]
    I2C2_ERR = 34,
    #[doc = "35 - TMR13 global interrupt"]
    TMR13 = 35,
    #[doc = "67 - USB On The Go FS global interrupt"]
    OTGFS1 = 67,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
#[doc = "Power control"]
pub type PWC = crate::Periph<pwc::RegisterBlock, 0x4000_7000>;
impl core::fmt::Debug for PWC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PWC").finish()
    }
}
#[doc = "Power control"]
pub mod pwc;
#[doc = "Clock and reset management"]
pub type CRM = crate::Periph<crm::RegisterBlock, 0x4002_1000>;
impl core::fmt::Debug for CRM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRM").finish()
    }
}
#[doc = "Clock and reset management"]
pub mod crm;
#[doc = "General purpose I/Os"]
pub type GPIOA = crate::Periph<gpioa::RegisterBlock, 0x4800_0000>;
impl core::fmt::Debug for GPIOA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOA").finish()
    }
}
#[doc = "General purpose I/Os"]
pub mod gpioa;
#[doc = "General purpose I/Os"]
pub type GPIOB = crate::Periph<gpioa::RegisterBlock, 0x4800_0400>;
impl core::fmt::Debug for GPIOB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOB").finish()
    }
}
#[doc = "General purpose I/Os"]
pub use self::gpioa as gpiob;
#[doc = "General purpose I/Os"]
pub type GPIOC = crate::Periph<gpioa::RegisterBlock, 0x4800_0800>;
impl core::fmt::Debug for GPIOC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOC").finish()
    }
}
#[doc = "General purpose I/Os"]
pub use self::gpioa as gpioc;
#[doc = "General purpose I/Os"]
pub type GPIOD = crate::Periph<gpioa::RegisterBlock, 0x4800_0c00>;
impl core::fmt::Debug for GPIOD {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOD").finish()
    }
}
#[doc = "General purpose I/Os"]
pub use self::gpioa as gpiod;
#[doc = "General purpose I/Os"]
pub type GPIOF = crate::Periph<gpioa::RegisterBlock, 0x4800_1400>;
impl core::fmt::Debug for GPIOF {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOF").finish()
    }
}
#[doc = "General purpose I/Os"]
pub use self::gpioa as gpiof;
#[doc = "EXINT"]
pub type EXINT = crate::Periph<exint::RegisterBlock, 0x4001_0400>;
impl core::fmt::Debug for EXINT {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EXINT").finish()
    }
}
#[doc = "EXINT"]
pub mod exint;
#[doc = "DMA controller"]
pub type DMA1 = crate::Periph<dma1::RegisterBlock, 0x4002_0000>;
impl core::fmt::Debug for DMA1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DMA1").finish()
    }
}
#[doc = "DMA controller"]
pub mod dma1;
#[doc = "Real-time clock"]
pub type ERTC = crate::Periph<ertc::RegisterBlock, 0x4000_2800>;
impl core::fmt::Debug for ERTC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ERTC").finish()
    }
}
#[doc = "Real-time clock"]
pub mod ertc;
#[doc = "Watchdog"]
pub type WDT = crate::Periph<wdt::RegisterBlock, 0x4000_3000>;
impl core::fmt::Debug for WDT {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WDT").finish()
    }
}
#[doc = "Watchdog"]
pub mod wdt;
#[doc = "Window watchdog"]
pub type WWDT = crate::Periph<wwdt::RegisterBlock, 0x4000_2c00>;
impl core::fmt::Debug for WWDT {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WWDT").finish()
    }
}
#[doc = "Window watchdog"]
pub mod wwdt;
#[doc = "Advanced timer"]
pub type TMR1 = crate::Periph<tmr1::RegisterBlock, 0x4001_2c00>;
impl core::fmt::Debug for TMR1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TMR1").finish()
    }
}
#[doc = "Advanced timer"]
pub mod tmr1;
#[doc = "General purpose timer"]
pub type TMR2 = crate::Periph<tmr2::RegisterBlock, 0x4000_0000>;
impl core::fmt::Debug for TMR2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TMR2").finish()
    }
}
#[doc = "General purpose timer"]
pub mod tmr2;
#[doc = "General purpose timer"]
pub type TMR3 = crate::Periph<tmr3::RegisterBlock, 0x4000_0400>;
impl core::fmt::Debug for TMR3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TMR3").finish()
    }
}
#[doc = "General purpose timer"]
pub mod tmr3;
#[doc = "Basic timer"]
pub type TMR6 = crate::Periph<tmr6::RegisterBlock, 0x4000_1000>;
impl core::fmt::Debug for TMR6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TMR6").finish()
    }
}
#[doc = "Basic timer"]
pub mod tmr6;
#[doc = "Basic timer"]
pub type TMR7 = crate::Periph<tmr6::RegisterBlock, 0x4000_1400>;
impl core::fmt::Debug for TMR7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TMR7").finish()
    }
}
#[doc = "Basic timer"]
pub use self::tmr6 as tmr7;
#[doc = "General purpose timer"]
pub type TMR13 = crate::Periph<tmr13::RegisterBlock, 0x4000_1c00>;
impl core::fmt::Debug for TMR13 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TMR13").finish()
    }
}
#[doc = "General purpose timer"]
pub mod tmr13;
#[doc = "General-purpose-timers"]
pub type TMR14 = crate::Periph<tmr14::RegisterBlock, 0x4000_2000>;
impl core::fmt::Debug for TMR14 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TMR14").finish()
    }
}
#[doc = "General-purpose-timers"]
pub mod tmr14;
#[doc = "General-purpose-timers"]
pub type TMR15 = crate::Periph<tmr15::RegisterBlock, 0x4001_4000>;
impl core::fmt::Debug for TMR15 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TMR15").finish()
    }
}
#[doc = "General-purpose-timers"]
pub mod tmr15;
#[doc = "General-purpose-timers"]
pub type TMR16 = crate::Periph<tmr16::RegisterBlock, 0x4001_4400>;
impl core::fmt::Debug for TMR16 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TMR16").finish()
    }
}
#[doc = "General-purpose-timers"]
pub mod tmr16;
#[doc = "General-purpose-timers"]
pub type TMR17 = crate::Periph<tmr16::RegisterBlock, 0x4001_4800>;
impl core::fmt::Debug for TMR17 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TMR17").finish()
    }
}
#[doc = "General-purpose-timers"]
pub use self::tmr16 as tmr17;
#[doc = "Inter-integrated circuit"]
pub type I2C1 = crate::Periph<i2c1::RegisterBlock, 0x4000_5400>;
impl core::fmt::Debug for I2C1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C1").finish()
    }
}
#[doc = "Inter-integrated circuit"]
pub mod i2c1;
#[doc = "Inter-integrated circuit"]
pub type I2C2 = crate::Periph<i2c1::RegisterBlock, 0x4000_5800>;
impl core::fmt::Debug for I2C2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C2").finish()
    }
}
#[doc = "Inter-integrated circuit"]
pub use self::i2c1 as i2c2;
#[doc = "Can controller area network"]
pub type CAN1 = crate::Periph<can1::RegisterBlock, 0x4000_6400>;
impl core::fmt::Debug for CAN1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CAN1").finish()
    }
}
#[doc = "Can controller area network"]
pub mod can1;
#[doc = "HICK Auto Clock Calibration"]
pub type ACC = crate::Periph<acc::RegisterBlock, 0x4000_6c00>;
impl core::fmt::Debug for ACC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ACC").finish()
    }
}
#[doc = "HICK Auto Clock Calibration"]
pub mod acc;
#[doc = "Serial peripheral interface"]
pub type SPI1 = crate::Periph<spi1::RegisterBlock, 0x4001_3000>;
impl core::fmt::Debug for SPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI1").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub mod spi1;
#[doc = "Serial peripheral interface"]
pub type SPI2 = crate::Periph<spi1::RegisterBlock, 0x4000_3800>;
impl core::fmt::Debug for SPI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI2").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub use self::spi1 as spi2;
#[doc = "Serial peripheral interface"]
pub type SPI3 = crate::Periph<spi1::RegisterBlock, 0x4000_3c00>;
impl core::fmt::Debug for SPI3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI3").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub use self::spi1 as spi3;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type USART1 = crate::Periph<usart1::RegisterBlock, 0x4001_3800>;
impl core::fmt::Debug for USART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART1").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub mod usart1;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type USART2 = crate::Periph<usart1::RegisterBlock, 0x4000_4400>;
impl core::fmt::Debug for USART2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART2").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use self::usart1 as usart2;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type USART3 = crate::Periph<usart1::RegisterBlock, 0x4000_4800>;
impl core::fmt::Debug for USART3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART3").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use self::usart1 as usart3;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type USART4 = crate::Periph<usart1::RegisterBlock, 0x4000_4c00>;
impl core::fmt::Debug for USART4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART4").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use self::usart1 as usart4;
#[doc = "Analog to digital converter"]
pub type ADC1 = crate::Periph<adc1::RegisterBlock, 0x4001_2400>;
impl core::fmt::Debug for ADC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC1").finish()
    }
}
#[doc = "Analog to digital converter"]
pub mod adc1;
#[doc = "System configuration controller"]
pub type SCFG = crate::Periph<scfg::RegisterBlock, 0x4001_0000>;
impl core::fmt::Debug for SCFG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SCFG").finish()
    }
}
#[doc = "System configuration controller"]
pub mod scfg;
#[doc = "Debug support"]
pub type DEBUG = crate::Periph<debug::RegisterBlock, 0xe004_2000>;
impl core::fmt::Debug for DEBUG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DEBUG").finish()
    }
}
#[doc = "Debug support"]
pub mod debug;
#[doc = "CRC calculation unit"]
pub type CRC = crate::Periph<crc::RegisterBlock, 0x4002_3000>;
impl core::fmt::Debug for CRC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRC").finish()
    }
}
#[doc = "CRC calculation unit"]
pub mod crc;
#[doc = "Flash memory controler"]
pub type FLASH = crate::Periph<flash::RegisterBlock, 0x4002_2000>;
impl core::fmt::Debug for FLASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FLASH").finish()
    }
}
#[doc = "Flash memory controler"]
pub mod flash;
#[doc = "USB on-the-go full speed"]
pub type USB_OTG1_GLOBAL = crate::Periph<usb_otg1_global::RegisterBlock, 0x5000_0000>;
impl core::fmt::Debug for USB_OTG1_GLOBAL {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USB_OTG1_GLOBAL").finish()
    }
}
#[doc = "USB on-the-go full speed"]
pub mod usb_otg1_global;
#[doc = "USB on the go full speed"]
pub type USB_OTG1_HOST = crate::Periph<usb_otg1_host::RegisterBlock, 0x5000_0400>;
impl core::fmt::Debug for USB_OTG1_HOST {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USB_OTG1_HOST").finish()
    }
}
#[doc = "USB on the go full speed"]
pub mod usb_otg1_host;
#[doc = "USB on the go full speed"]
pub type USB_OTG1_DEVICE = crate::Periph<usb_otg1_device::RegisterBlock, 0x5000_0800>;
impl core::fmt::Debug for USB_OTG1_DEVICE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USB_OTG1_DEVICE").finish()
    }
}
#[doc = "USB on the go full speed"]
pub mod usb_otg1_device;
#[doc = "USB on the go full speed"]
pub type USB_OTG1_PWRCLK = crate::Periph<usb_otg1_pwrclk::RegisterBlock, 0x5000_0e00>;
impl core::fmt::Debug for USB_OTG1_PWRCLK {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USB_OTG1_PWRCLK").finish()
    }
}
#[doc = "USB on the go full speed"]
pub mod usb_otg1_pwrclk;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "PWC"]
    pub PWC: PWC,
    #[doc = "CRM"]
    pub CRM: CRM,
    #[doc = "GPIOA"]
    pub GPIOA: GPIOA,
    #[doc = "GPIOB"]
    pub GPIOB: GPIOB,
    #[doc = "GPIOC"]
    pub GPIOC: GPIOC,
    #[doc = "GPIOD"]
    pub GPIOD: GPIOD,
    #[doc = "GPIOF"]
    pub GPIOF: GPIOF,
    #[doc = "EXINT"]
    pub EXINT: EXINT,
    #[doc = "DMA1"]
    pub DMA1: DMA1,
    #[doc = "ERTC"]
    pub ERTC: ERTC,
    #[doc = "WDT"]
    pub WDT: WDT,
    #[doc = "WWDT"]
    pub WWDT: WWDT,
    #[doc = "TMR1"]
    pub TMR1: TMR1,
    #[doc = "TMR2"]
    pub TMR2: TMR2,
    #[doc = "TMR3"]
    pub TMR3: TMR3,
    #[doc = "TMR6"]
    pub TMR6: TMR6,
    #[doc = "TMR7"]
    pub TMR7: TMR7,
    #[doc = "TMR13"]
    pub TMR13: TMR13,
    #[doc = "TMR14"]
    pub TMR14: TMR14,
    #[doc = "TMR15"]
    pub TMR15: TMR15,
    #[doc = "TMR16"]
    pub TMR16: TMR16,
    #[doc = "TMR17"]
    pub TMR17: TMR17,
    #[doc = "I2C1"]
    pub I2C1: I2C1,
    #[doc = "I2C2"]
    pub I2C2: I2C2,
    #[doc = "CAN1"]
    pub CAN1: CAN1,
    #[doc = "ACC"]
    pub ACC: ACC,
    #[doc = "SPI1"]
    pub SPI1: SPI1,
    #[doc = "SPI2"]
    pub SPI2: SPI2,
    #[doc = "SPI3"]
    pub SPI3: SPI3,
    #[doc = "USART1"]
    pub USART1: USART1,
    #[doc = "USART2"]
    pub USART2: USART2,
    #[doc = "USART3"]
    pub USART3: USART3,
    #[doc = "USART4"]
    pub USART4: USART4,
    #[doc = "ADC1"]
    pub ADC1: ADC1,
    #[doc = "SCFG"]
    pub SCFG: SCFG,
    #[doc = "DEBUG"]
    pub DEBUG: DEBUG,
    #[doc = "CRC"]
    pub CRC: CRC,
    #[doc = "FLASH"]
    pub FLASH: FLASH,
    #[doc = "USB_OTG1_GLOBAL"]
    pub USB_OTG1_GLOBAL: USB_OTG1_GLOBAL,
    #[doc = "USB_OTG1_HOST"]
    pub USB_OTG1_HOST: USB_OTG1_HOST,
    #[doc = "USB_OTG1_DEVICE"]
    pub USB_OTG1_DEVICE: USB_OTG1_DEVICE,
    #[doc = "USB_OTG1_PWRCLK"]
    pub USB_OTG1_PWRCLK: USB_OTG1_PWRCLK,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            PWC: PWC::steal(),
            CRM: CRM::steal(),
            GPIOA: GPIOA::steal(),
            GPIOB: GPIOB::steal(),
            GPIOC: GPIOC::steal(),
            GPIOD: GPIOD::steal(),
            GPIOF: GPIOF::steal(),
            EXINT: EXINT::steal(),
            DMA1: DMA1::steal(),
            ERTC: ERTC::steal(),
            WDT: WDT::steal(),
            WWDT: WWDT::steal(),
            TMR1: TMR1::steal(),
            TMR2: TMR2::steal(),
            TMR3: TMR3::steal(),
            TMR6: TMR6::steal(),
            TMR7: TMR7::steal(),
            TMR13: TMR13::steal(),
            TMR14: TMR14::steal(),
            TMR15: TMR15::steal(),
            TMR16: TMR16::steal(),
            TMR17: TMR17::steal(),
            I2C1: I2C1::steal(),
            I2C2: I2C2::steal(),
            CAN1: CAN1::steal(),
            ACC: ACC::steal(),
            SPI1: SPI1::steal(),
            SPI2: SPI2::steal(),
            SPI3: SPI3::steal(),
            USART1: USART1::steal(),
            USART2: USART2::steal(),
            USART3: USART3::steal(),
            USART4: USART4::steal(),
            ADC1: ADC1::steal(),
            SCFG: SCFG::steal(),
            DEBUG: DEBUG::steal(),
            CRC: CRC::steal(),
            FLASH: FLASH::steal(),
            USB_OTG1_GLOBAL: USB_OTG1_GLOBAL::steal(),
            USB_OTG1_HOST: USB_OTG1_HOST::steal(),
            USB_OTG1_DEVICE: USB_OTG1_DEVICE::steal(),
            USB_OTG1_PWRCLK: USB_OTG1_PWRCLK::steal(),
        }
    }
}
